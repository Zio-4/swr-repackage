{
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/clemchou/ROAR-v3.0-Development/v1.0.1/\",\"caller\":{\"name\":\"@babel/node\"},\"configFile\":false,\"cwd\":\"/Users/clemchou/ROAR-v3.0-Development\",\"filename\":\"/Users/clemchou/ROAR-v3.0-Development/v1.0.1/experiment_script.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"production\",\"root\":\"/Users/clemchou/ROAR-v3.0-Development\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.13.14:production": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/clemchou/ROAR-v3.0-Development/v1.0.1/",
      "caller": {
        "name": "@babel/node"
      },
      "configFile": false,
      "cwd": "/Users/clemchou/ROAR-v3.0-Development",
      "filename": "/Users/clemchou/ROAR-v3.0-Development/v1.0.1/experiment_script.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "browserslistConfigFile": false,
      "envName": "production",
      "root": "/Users/clemchou/ROAR-v3.0-Development",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-numeric-separator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-nullish-coalescing-operator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-json-strings",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-optional-catch-binding",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-async-generators",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-object-rest-spread",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/clemchou/ROAR-v3.0-Development/v1.0.1/experiment_script.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport",
          "exportNamespaceFrom"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/clemchou/ROAR-v3.0-Development/v1.0.1/experiment_script.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/clemchou/ROAR-v3.0-Development/v1.0.1/",
        "sourceFileName": "experiment_script.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\n/* create timeline */\nvar timeline = [];\nvar start_time = new Date();\nimages = ['newassets/1.png', 'newassets/2.png'];\nvideos = ['newassets/adventurer1.mp4', 'newassets/adventurer2.mp4'];\nsounds = [];\n/* preload the specified files */\n\nvar preload = {\n  type: 'preload',\n  //images: images,\n  //video: videos,\n  audio: sounds,\n  show_progress_bar: true\n};\ntimeline.push(preload);\nvar trial = {\n  type: jsPsychExternalHtml,\n  url: \"external_page.html\",\n  cont_btn: \"start\",\n  check_fn: check_consent\n};\n/* define welcome message trial */\n\nvar welcome = {\n  type: \"html-keyboard-response\",\n  stimulus: `<h1>Welcome to the world of Lexicality!</h1>\n\t<div class=\"row\">\n\t\t<div class=\"column_1\">\n\t\t\t<!--\n\t\t    <video class=\"characterleft\" height=\"320\" autoplay>\n\t\t\t\t<source src=\"assets/wizard_magic.mp4\" type=\"video/mp4\" alt=\"A wizard waving a magic wand\">\n\t\t\t</video>\n\t\t\t-->\n\t\t\t<img class=\"characterleft\" src=\"assets/wizard_magic.gif\" height=\"320px\" alt=\"animation of a wizard waving a magic wand\">\n\t  </div>\n\t  <div class=\"column_3\">\n\t\t\t<p class=\"middle\"> You are a young wizard searching for the gate that will return you to your home on Earth. To reach it, you must cross valleys with magical guardians.</p>\n\t\t\t<p class=\"middle\"> To summon the guardians and ask them to let you through, you will cast spells by telling the difference between the magic words of Lexicality and English.</p>\n\t\t</div>\n</div>\n\n\t<div class=\"button\">Press <span class=\"yellow\">Space</span> to continue.\n\t</div>`,\n  data: {\n    start_time: start_time.toLocaleString('PST'),\n    start_time_unix: start_time.getTime()\n  }\n};\ntimeline.push(welcome);\n\nfunction imageBlocks(image_paths, timeline) {\n  for (let i of image_paths) {\n    var block = {\n      type: 'image-keyboard-response',\n      stimulus: [i]\n    };\n    timeline.push(block);\n  }\n}\n\nfunction videoBlocks(video_paths, timeline) {\n  for (let v of video_paths) {\n    var block = {\n      type: 'video-keyboard-response',\n      stimulus: [v]\n    };\n    timeline.push(block);\n  }\n} //imageBlocks(images, timeline)\n//videoBlocks(videos, timeline)\n\n/* define instructions trial */\n\n\nvar instrux1 = {\n  type: \"html-keyboard-response\",\n  stimulus: '<img src = \"newassets/1.png\" style = \"position:relative; top:200px;\" />  \\\n  <video width = \"320\" autoplay> <source src = \"newassets/wizard_magic.mp4\" type = \"video/mp4\"/> Your browser does not support the video element. </video> \\\n  <audio autoplay> <source src = \"newassets/set-1.wav\" type=\"audio/wav\"> Your browser does not support the audio element. </audio>'\n};\ntimeline.push(instrux1);\nvar instructions = {\n  type: \"html-keyboard-response\",\n  stimulus: `\n        <p>The magic words sound like fake, made-up words.\n        They might look like English words, but they don't\n        mean anything in English.</p>\n        <p>For example, <i> laip, bove,</i> and <i>\n        cigbert</i> are magic words.</p>\n        If you see a magic word, press the <strong>LEFT ARROW KEY</strong></p>\n        <p>The other words will be onese you recognize.\n        They are real English words like <i>is, basket,</i> and <i>lion.</i>\n        \\nIf you see a real word, hit the <strong>RIGHT ARROW KEY</strong></p>\n        </div>\n        <p>Press any key to begin practice!</p>\n      `,\n  post_trial_gap: 2000\n};\ntimeline.push(instructions);\n/* practice test trials */\n\n/* there's gotta be a better way to list out the stimuli - read in from a csv?? */\n\nvar fixation = {\n  type: 'html-keyboard-response',\n  stimulus: function () {\n    var trials = jsPsych.data.get().filter({\n      task: 'response'\n    });\n    var correct_trials = trials.filter({\n      correct: true\n    });\n    console.log(correct_trials.count());\n\n    if (correct_trials.count() == 3) {\n      console.log('hi');\n      return `<p>You responded correctly on ${correct_trials.count()} of the trials.</p>`;\n    } else {\n      return '<div style=\"font-size:60px;\">+</div>';\n    }\n  },\n  choices: jsPsych.NO_KEYS,\n  trial_duration: 1000,\n  data: {\n    task: 'fixation'\n  }\n};\nvar test = {\n  type: \"html-keyboard-response\",\n  stimulus: jsPsych.timelineVariable('stimulus'),\n  stimulus_duration: 2000,\n  trial_duration: 5000,\n  choices: ['ArrowLeft', 'ArrowRight'],\n  data: {\n    task: 'response',\n\n    /* tag the test trials with this taskname so we can filter data later */\n    correct_response: jsPsych.timelineVariable('correct_response')\n  },\n  on_finish: function (data) {\n    data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response);\n  }\n};\nvar debrief_block = {\n  type: \"html-keyboard-response\",\n  stimulus: function () {\n    var trials = jsPsych.data.get().filter({\n      task: 'response'\n    });\n    var correct_trials = trials.filter({\n      correct: true\n    });\n    var incorrect_trials = trials.filter({\n      correct: false\n    });\n    var accuracy = Math.round(correct_trials.count() / trials.count() * 100);\n    var rt = Math.round(correct_trials.select('rt').mean());\n    var irt = Math.round(incorrect_trials.select('rt').mean());\n    return `<p>You responded correctly on ${accuracy}% of the trials.</p>\n          <p>Your average response time on correct trials was ${rt}ms.</p>\n          <p>Your average response time on incorrect trials was ${irt}ms.</p>\n          <p>Press any key to complete the experiment. Thank you!</p>`;\n  }\n};\n\nfunction readCSV(url) {\n  return new Promise((resolve, reject) => {\n    Papa.parse(url, {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        var csv_stimuli = results.data;\n        resolve(csv_stimuli);\n      }\n    });\n  });\n}\n\nasync function roarBlocks(data, startTime, randomize) {\n  var csv_stimuli = await readCSV(data);\n  csv_result = csv_stimuli.reduce((accum, row) => {\n    if (row.realpseudo === 'real') {\n      correct_response = 'ArrowRight';\n    } else {\n      correct_response = 'ArrowLeft';\n    }\n\n    const newRow = {\n      'stimulus': '<div style=\"font-size:60px;\">' + row.word + '</div>',\n      'correct_response': correct_response\n    };\n    accum.push(newRow);\n    return accum;\n  }, []); // console.log(csv_result)\n  // var csv_block = {\n  //     timeline: [fixation, test],\n  //     timeline_variables: csv_result.slice(0,5),\n  //     randomize_order: randomize\n  // }\n  //\n  // timeline.push(csv_block)\n  //\n  // var csv_block2 = {\n  //     timeline: [fixation, test],\n  //     timeline_variables: csv_result.slice(6,10),\n  //     randomize_order: randomize\n  // }\n\n  function CreateBlock(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    for (let x of array) {\n      var block = {\n        timeline: [fixation, test],\n        timeline_variables: [x]\n      };\n      timeline.push(block);\n    }\n  }\n\n  CreateBlock(csv_result.slice(0, 10));\n\n  function saveToFirebase(code, filedata) {\n    var ref = firebase.database().ref(code).set(filedata);\n  }\n\n  var submit_block = {\n    type: \"single-stim\",\n    stimuli: [\" \"],\n    choices: ['none'],\n    timing_response: 0.001,\n    timing_post_trial: 0,\n    on_finish: function () {\n      saveToFirebase('subject_code', jsPsych.data.getData());\n    }\n  };\n  var firebaseConfig = {\n    apiKey: \"AIzaSyCX9WR-j9yv1giYeFsMpbjj2G3p7jNHxIU\",\n    authDomain: \"gse-yeatmanlab.firebaseapp.com\",\n    projectId: \"gse-yeatmanlab\",\n    storageBucket: \"gse-yeatmanlab.appspot.com\",\n    messagingSenderId: \"292331000426\",\n    appId: \"1:292331000426:web:ae9e28adbe34b391737013\",\n    measurementId: \"G-DY06NYG5E1\"\n  };\n\n  function makeid() {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (var i = 0; i < 16; i++) text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return text;\n  } // Initialize Firebase\n\n\n  firebase.initializeApp(firebaseConfig);\n  timeline.push(debrief_block); //timeline.push(submit_block)\n\n  jsPsych.init({\n    timeline: timeline,\n    on_finish: function () {\n      /* display data on exp end - useful for dev */\n      subjID = makeid();\n      jsPsych.data.addProperties({\n        subj: subjID\n      });\n      saveToFirebase('subj/' + subjID, JSON.parse(jsPsych.data.get().json()));\n      jsPsych.data.displayData();\n    }\n  });\n}\n\nconst data_url = \"wordlist/ldt-design.csv\";\nroarBlocks(data_url, start_time, true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "experiment_script.js"
      ],
      "names": [
        "timeline",
        "start_time",
        "Date",
        "images",
        "videos",
        "sounds",
        "preload",
        "type",
        "audio",
        "show_progress_bar",
        "push",
        "trial",
        "jsPsychExternalHtml",
        "url",
        "cont_btn",
        "check_fn",
        "check_consent",
        "welcome",
        "stimulus",
        "data",
        "toLocaleString",
        "start_time_unix",
        "getTime",
        "imageBlocks",
        "image_paths",
        "i",
        "block",
        "videoBlocks",
        "video_paths",
        "v",
        "instrux1",
        "instructions",
        "post_trial_gap",
        "fixation",
        "trials",
        "jsPsych",
        "get",
        "filter",
        "task",
        "correct_trials",
        "correct",
        "console",
        "log",
        "count",
        "choices",
        "NO_KEYS",
        "trial_duration",
        "test",
        "timelineVariable",
        "stimulus_duration",
        "correct_response",
        "on_finish",
        "pluginAPI",
        "compareKeys",
        "response",
        "debrief_block",
        "incorrect_trials",
        "accuracy",
        "Math",
        "round",
        "rt",
        "select",
        "mean",
        "irt",
        "readCSV",
        "Promise",
        "resolve",
        "reject",
        "Papa",
        "parse",
        "download",
        "header",
        "dynamicTyping",
        "skipEmptyLines",
        "complete",
        "results",
        "csv_stimuli",
        "roarBlocks",
        "startTime",
        "randomize",
        "csv_result",
        "reduce",
        "accum",
        "row",
        "realpseudo",
        "newRow",
        "word",
        "CreateBlock",
        "array",
        "length",
        "j",
        "floor",
        "random",
        "temp",
        "x",
        "timeline_variables",
        "slice",
        "saveToFirebase",
        "code",
        "filedata",
        "ref",
        "firebase",
        "database",
        "set",
        "submit_block",
        "stimuli",
        "timing_response",
        "timing_post_trial",
        "getData",
        "firebaseConfig",
        "apiKey",
        "authDomain",
        "projectId",
        "storageBucket",
        "messagingSenderId",
        "appId",
        "measurementId",
        "makeid",
        "text",
        "possible",
        "charAt",
        "initializeApp",
        "init",
        "subjID",
        "addProperties",
        "subj",
        "JSON",
        "json",
        "displayData",
        "data_url"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/clemchou/ROAR-v3.0-Development/v1.0.1/",
      "sourcesContent": [
        "/* create timeline */\nvar timeline = [];\nvar start_time = new Date();\n\nimages = [\n            'newassets/1.png',\n            'newassets/2.png'\n]\n\nvideos = ['newassets/adventurer1.mp4',\n          'newassets/adventurer2.mp4'\n]\n\nsounds = []\n\n\n/* preload the specified files */\nvar preload = {\n    type: 'preload',\n    //images: images,\n    //video: videos,\n    audio: sounds,\n    show_progress_bar: true\n}\ntimeline.push(preload);\n\nvar trial = {\n    type: jsPsychExternalHtml,\n    url: \"external_page.html\",\n    cont_btn: \"start\",\n    check_fn: check_consent\n};\n\n/* define welcome message trial */\nvar welcome = {\n    type: \"html-keyboard-response\",\n    stimulus: `<h1>Welcome to the world of Lexicality!</h1>\n\t<div class=\"row\">\n\t\t<div class=\"column_1\">\n\t\t\t<!--\n\t\t    <video class=\"characterleft\" height=\"320\" autoplay>\n\t\t\t\t<source src=\"assets/wizard_magic.mp4\" type=\"video/mp4\" alt=\"A wizard waving a magic wand\">\n\t\t\t</video>\n\t\t\t-->\n\t\t\t<img class=\"characterleft\" src=\"assets/wizard_magic.gif\" height=\"320px\" alt=\"animation of a wizard waving a magic wand\">\n\t  </div>\n\t  <div class=\"column_3\">\n\t\t\t<p class=\"middle\"> You are a young wizard searching for the gate that will return you to your home on Earth. To reach it, you must cross valleys with magical guardians.</p>\n\t\t\t<p class=\"middle\"> To summon the guardians and ask them to let you through, you will cast spells by telling the difference between the magic words of Lexicality and English.</p>\n\t\t</div>\n</div>\n\n\t<div class=\"button\">Press <span class=\"yellow\">Space</span> to continue.\n\t</div>`,\n    data: {\n        start_time: start_time.toLocaleString('PST'),\n        start_time_unix: start_time.getTime()\n    }\n};\ntimeline.push(welcome);\n\nfunction imageBlocks(image_paths, timeline) {\n    for (let i of image_paths) {\n        var block = {\n            type: 'image-keyboard-response',\n            stimulus: [i]\n        }\n        timeline.push(block)\n    }\n}\n\nfunction videoBlocks(video_paths, timeline) {\n    for (let v of video_paths) {\n        var block = {\n            type: 'video-keyboard-response',\n            stimulus: [v]\n        }\n        timeline.push(block)\n    }\n}\n\n//imageBlocks(images, timeline)\n//videoBlocks(videos, timeline)\n\n\n/* define instructions trial */\n\nvar instrux1 = {\n  type: \"html-keyboard-response\",\n  stimulus: '<img src = \"newassets/1.png\" style = \"position:relative; top:200px;\" />  \\\n  <video width = \"320\" autoplay> <source src = \"newassets/wizard_magic.mp4\" type = \"video/mp4\"/> Your browser does not support the video element. </video> \\\n  <audio autoplay> <source src = \"newassets/set-1.wav\" type=\"audio/wav\"> Your browser does not support the audio element. </audio>'\n};\ntimeline.push(instrux1);\n\nvar instructions = {\n    type: \"html-keyboard-response\",\n    stimulus: `\n        <p>The magic words sound like fake, made-up words.\n        They might look like English words, but they don't\n        mean anything in English.</p>\n        <p>For example, <i> laip, bove,</i> and <i>\n        cigbert</i> are magic words.</p>\n        If you see a magic word, press the <strong>LEFT ARROW KEY</strong></p>\n        <p>The other words will be onese you recognize.\n        They are real English words like <i>is, basket,</i> and <i>lion.</i>\n        \\nIf you see a real word, hit the <strong>RIGHT ARROW KEY</strong></p>\n        </div>\n        <p>Press any key to begin practice!</p>\n      `,\n    post_trial_gap: 2000\n};\ntimeline.push(instructions);\n\n/* practice test trials */\n/* there's gotta be a better way to list out the stimuli - read in from a csv?? */\n\nvar fixation = {\n    type: 'html-keyboard-response',\n    stimulus: function() {\n        var trials = jsPsych.data.get().filter({task: 'response'});\n        var correct_trials = trials.filter({correct: true});\n        console.log(correct_trials.count());\n        if (correct_trials.count() == 3) {\n            console.log('hi');\n            return `<p>You responded correctly on ${correct_trials.count()} of the trials.</p>`\n        } else{return '<div style=\"font-size:60px;\">+</div>'}\n        },\n\n\n    choices: jsPsych.NO_KEYS,\n    trial_duration: 1000,\n    data: {\n        task: 'fixation'\n    }\n}\n\nvar test = {\n    type: \"html-keyboard-response\",\n    stimulus: jsPsych.timelineVariable('stimulus'),\n    stimulus_duration: 2000,\n    trial_duration: 5000,\n    choices: ['ArrowLeft', 'ArrowRight'],\n    data: {\n        task: 'response', /* tag the test trials with this taskname so we can filter data later */\n        correct_response: jsPsych.timelineVariable('correct_response')\n    },\n    on_finish: function(data){\n        data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response);\n    }\n};\n\n\n\nvar debrief_block = {\n    type: \"html-keyboard-response\",\n    stimulus: function() {\n\n        var trials = jsPsych.data.get().filter({task: 'response'});\n        var correct_trials = trials.filter({correct: true});\n        var incorrect_trials = trials.filter({correct: false});\n        var accuracy = Math.round(correct_trials.count() / trials.count() * 100);\n        var rt = Math.round(correct_trials.select('rt').mean());\n        var irt = Math.round(incorrect_trials.select('rt').mean());\n\n        return `<p>You responded correctly on ${accuracy}% of the trials.</p>\n          <p>Your average response time on correct trials was ${rt}ms.</p>\n          <p>Your average response time on incorrect trials was ${irt}ms.</p>\n          <p>Press any key to complete the experiment. Thank you!</p>`;\n\n    }\n};\n\nfunction readCSV(url) {\n    return new Promise((resolve, reject) => {\n        Papa.parse(\n            url, {\n                download: true,\n                header: true,\n                dynamicTyping: true,\n                skipEmptyLines: true,\n                complete: function (results) {\n                    var csv_stimuli = results.data\n                    resolve(csv_stimuli)\n                }\n            })\n    })\n}\n\nasync function roarBlocks(data, startTime, randomize){\n    var csv_stimuli = await readCSV(data)\n\n    csv_result = csv_stimuli\n        .reduce((accum, row) => {\n            if (row.realpseudo === 'real') {\n                correct_response = 'ArrowRight'\n            } else {\n                correct_response = 'ArrowLeft'\n            }\n            const newRow = {\n                'stimulus': '<div style=\"font-size:60px;\">' + row.word + '</div>',\n                'correct_response': correct_response\n            }\n            accum.push(newRow)\n            return accum\n        }, [])\n\n    // console.log(csv_result)\n\n    // var csv_block = {\n    //     timeline: [fixation, test],\n    //     timeline_variables: csv_result.slice(0,5),\n    //     randomize_order: randomize\n    // }\n    //\n    // timeline.push(csv_block)\n    //\n    // var csv_block2 = {\n    //     timeline: [fixation, test],\n    //     timeline_variables: csv_result.slice(6,10),\n    //     randomize_order: randomize\n    // }\n    function CreateBlock(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n\n        for (let x of array) {\n            var block = {\n                timeline: [fixation, test],\n                timeline_variables: [x]\n            }\n            timeline.push(block)\n        }\n    }\n\n    CreateBlock(csv_result.slice(0,10))\n\n\n    function saveToFirebase(code,filedata){\n        var ref = firebase.database().ref(code).set(filedata);\n    }\n\n    var submit_block = {\n        type: \"single-stim\",\n        stimuli: [\" \"],\n        choices: ['none'],\n        timing_response: 0.001,\n        timing_post_trial: 0,\n        on_finish: function() {\n            saveToFirebase('subject_code',jsPsych.data.getData());\n        }\n    }\n\n    var firebaseConfig = {\n        apiKey: \"AIzaSyCX9WR-j9yv1giYeFsMpbjj2G3p7jNHxIU\",\n        authDomain: \"gse-yeatmanlab.firebaseapp.com\",\n        projectId: \"gse-yeatmanlab\",\n        storageBucket: \"gse-yeatmanlab.appspot.com\",\n        messagingSenderId: \"292331000426\",\n        appId: \"1:292331000426:web:ae9e28adbe34b391737013\",\n        measurementId: \"G-DY06NYG5E1\"\n    };\n\n    function makeid(){\n        var text = \"\";\n        var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        for( var i=0; i < 16; i++ )\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        return text;\n    }\n\n    // Initialize Firebase\n    firebase.initializeApp(firebaseConfig);\n\n    timeline.push(debrief_block)\n    //timeline.push(submit_block)\n\n    jsPsych.init({\n        timeline: timeline,\n        on_finish: function() {  /* display data on exp end - useful for dev */\n            subjID = makeid()\n            jsPsych.data.addProperties({subj: subjID})\n            saveToFirebase('subj/' + subjID, JSON.parse(jsPsych.data.get().json()));\n            jsPsych.data.displayData();\n        }\n    })\n\n}\n\n\nconst data_url = \"wordlist/ldt-design.csv\"\nroarBlocks(data_url, start_time, true)\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1634232416527
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/clemchou/Documents/GitHub/ROAR3/src/\",\"caller\":{\"name\":\"@babel/node\"},\"configFile\":false,\"cwd\":\"/Users/clemchou/Documents/GitHub/ROAR3\",\"filename\":\"/Users/clemchou/Documents/GitHub/ROAR3/src/introduction.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"production\",\"root\":\"/Users/clemchou/Documents/GitHub/ROAR3\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.13.14:production": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/clemchou/Documents/GitHub/ROAR3/src/",
      "caller": {
        "name": "@babel/node"
      },
      "configFile": false,
      "cwd": "/Users/clemchou/Documents/GitHub/ROAR3",
      "filename": "/Users/clemchou/Documents/GitHub/ROAR3/src/introduction.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "browserslistConfigFile": false,
      "envName": "production",
      "root": "/Users/clemchou/Documents/GitHub/ROAR3",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-numeric-separator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-nullish-coalescing-operator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-json-strings",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-optional-catch-binding",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-async-generators",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-object-rest-spread",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/clemchou/Documents/GitHub/ROAR3/src/introduction.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport",
          "exportNamespaceFrom"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/clemchou/Documents/GitHub/ROAR3/src/introduction.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/clemchou/Documents/GitHub/ROAR3/src/",
        "sourceFileName": "introduction.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\n/* define welcome message trial */\nvar welcome = {\n  type: \"html-keyboard-response\",\n  stimulus: `<h1>Welcome to the world of Lexicality!!</h1>\n\\t<div class=\"row\">\n\\t\\t<div class=\"column_1\">\n\\t\\t\\t<img class=\"characterleft\" src=\"assets/wizard_magic.gif\" height=\"320px\" alt=\"animation of a wizard waving a magic wand\">\n\\t  \\t</div>\n\\t  <div class=\"column_3\">\n\\t\\t\\t<p class=\"middle\"> You are a young wizard searching for the gate that will return you to your home on Earth. To reach it, you must journey over lands ruled by magical guardians.</p>\n\\t\\t\\t<p class=\"middle\"> To call the guardian to let you through, you will tell the difference between made-up words and real words. &nbsp;</p>\n\\t\\t</div>\n\\t</div>\n\\t\n\\t<div class=\"button\">Press <span class=\"yellow\">Space</span> to continue\n\\t</div>`,\n  data: {\n    start_time: start_time.toLocaleString('PST'),\n    start_time_unix: start_time.getTime()\n  },\n  on_start: function () {\n    //set progress bar to 0 at the start of experiment\n    jsPsych.setProgressBar(0);\n  }\n};\n/* define instructions trial */\n\nvar instrux_1 = {\n  type: \"html-keyboard-response\",\n  stimulus: `\n    <h1>Welcome to the world of Lexicality!</h1>\n    <div class=\"row\">\n      <div class=\"column_1\">\n        <img class=\"characterleft\" src=\"assets/wizard_magic.gif\" height=\"320px\" alt=\"animation of a wizard waving a magic wand\">\n        </div>\n      <div class=\"column_3\">\n        <p class=\"middle\"> You are a young wizard searching for the gate that will return you to your home on Earth. To reach it, you must journey over lands ruled by magical guardians.</p>\n        <p class=\"middle\"> To call the guardian to let you through, you will tell the difference between made-up words and real words. &nbsp;</p>\n      </div>\n    </div>\n\n    <div class=\"button\">Press <span class=\"yellow\">Space</span> to continue\n    </div>\n      `,\n  //post_trial_gap: 2000,\n  on_start: function () {\n    //set progress bar to 0 at the start of experiment\n    jsPsych.setProgressBar(0);\n  }\n};\nvar instrux_2 = {\n  type: \"html-keyboard-response\",\n  stimulus: `\n    <h1>A real or made-up word will flash very quickly <br/> at the center of the screen.</h1>\n   <div class=\"row\">\n     <div class=\"column_2\">\n       <p>The made-up words might look like English words, but they do not mean anything in English. For example, laip, bove, or cigbert are made-up words. <span class=\"orange\"><b>If you see a made-up word, press the LEFT ARROW KEY.</b></span></p>\n     </div>\n     <div class=\"column_2\" style=\"background-color:#f2f2f2;\">\n       <p> The real words will be ones you recognize. They are real English words like is, and, basket, or lion. <span class=\"blue\"><b> If you see a real word, press the RIGHT ARROW KEY.</b></span></p>\n     </div>\n  </div>\n\n   <div class=\"row\">\n     <div class=\"column_2\">\n     <img width=\"100%\" src=\"assets/arrow_left_p2.png\" alt=\"Magic Word, Press the Left Arrow Key\" align=\"right\">\n     </div>\n     <div class=\"column_2\" style=\"background-color:#f2f2f2; height: 180px;\">\n     <img width=\"100%\" src=\"assets/arrow_right_p2.png\" alt=\"Real Word, Press the Right Arrow key\">\n     </div>\n   </div>\n\n   <div class=\"button\">Press <span class=\"yellow\">Space</span> to continue\n   </div>\n      `,\n  //post_trial_gap: 2000,\n  on_start: function () {\n    //set progress bar to 0 at the start of experiment\n    jsPsych.setProgressBar(0);\n  }\n};\nvar instrux_3 = {\n  type: \"html-keyboard-response\",\n  stimulus: `<h1>Great work, you are ready to begin the journey! </h1>\n\\t  <div>\n\\t\\t \\t <p class=\"center\"> As you travel through the valley, you’ll earn gold coins to bring home.</p>\n\\t\\t\\t  <img style=\"position: relative; top: 100px; \" width=\"400px\" src=\"assets/gold_coin.gif\" alt=\"gold\">\n\\t\\t\\t  <p class=\"center\" style=\"position: relative; top: 200px; \"><b>Look out for them!</b></p>\n\\t\\t </div>\n\\t\\t\n\\t<div class=\"button\">Press <span class=\"yellow\">Space</span> to begin\n\\t</div>\n\n      `,\n  //post_trial_gap: 2000,\n  on_start: function () {\n    //set progress bar to 0 at the start of experiment\n    jsPsych.setProgressBar(0);\n  }\n};\n/* define practice feedback trial*/\n\nvar practice_feedback = {\n  type: \"html-keyboard-response\",\n  stimulus: function () {\n    return `\n       <body>\n\\t<h1 class=\"lower\"><span class=${responseColor}>You pressed the ${responseLR} arrow key, <br/> which is for ${answerRP} words! </span></h1>\n\\t<h3 class=\"lower\">${currentPracStimulus}<span class=${answerColor}>  is a ${correctRP}  word.</span></h3>\n\\t<img class=\"lower\" src=\"assets/key_p3.png\" alt=\"arrow keys\">\n\n</body>\n      `;\n  },\n  post_trial_gap: 2000,\n  on_start: function () {\n    //set progress bar to 0 at the start of experiment\n    jsPsych.setProgressBar(0);\n  }\n}; //arrowkey_lex.png\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "introduction.js"
      ],
      "names": [
        "welcome",
        "type",
        "stimulus",
        "data",
        "start_time",
        "toLocaleString",
        "start_time_unix",
        "getTime",
        "on_start",
        "jsPsych",
        "setProgressBar",
        "instrux_1",
        "instrux_2",
        "instrux_3",
        "practice_feedback",
        "responseColor",
        "responseLR",
        "answerRP",
        "currentPracStimulus",
        "answerColor",
        "correctRP",
        "post_trial_gap"
      ],
      "mappings": ";;AAAA;AACA,IAAIA,OAAO,GAAG;AACVC,EAAAA,IAAI,EAAE,wBADI;AAEVC,EAAAA,QAAQ,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAdc;AAeVC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAEA,UAAU,CAACC,cAAX,CAA0B,KAA1B,CADV;AAEFC,IAAAA,eAAe,EAAEF,UAAU,CAACG,OAAX;AAFf,GAfI;AAmBVC,EAAAA,QAAQ,EAAE,YAAW;AACjB;AACAC,IAAAA,OAAO,CAACC,cAAR,CAAuB,CAAvB;AACH;AAtBS,CAAd;AA0BA;;AACA,IAAIC,SAAS,GAAG;AACZV,EAAAA,IAAI,EAAE,wBADM;AAEZC,EAAAA,QAAQ,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAhBgB;AAiBZ;AACAM,EAAAA,QAAQ,EAAE,YAAW;AACjB;AACAC,IAAAA,OAAO,CAACC,cAAR,CAAuB,CAAvB;AACH;AArBW,CAAhB;AAwBA,IAAIE,SAAS,GAAG;AACZX,EAAAA,IAAI,EAAE,wBADM;AAEZC,EAAAA,QAAQ,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAxBgB;AAyBZ;AACAM,EAAAA,QAAQ,EAAE,YAAW;AACjB;AACAC,IAAAA,OAAO,CAACC,cAAR,CAAuB,CAAvB;AACH;AA7BW,CAAhB;AAgCA,IAAIG,SAAS,GAAG;AACZZ,EAAAA,IAAI,EAAE,wBADM;AAEZC,EAAAA,QAAQ,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAZgB;AAaZ;AACAM,EAAAA,QAAQ,EAAE,YAAW;AACjB;AACAC,IAAAA,OAAO,CAACC,cAAR,CAAuB,CAAvB;AACH;AAjBW,CAAhB;AAoBA;;AACA,IAAII,iBAAiB,GAAG;AACpBb,EAAAA,IAAI,EAAE,wBADc;AAEpBC,EAAAA,QAAQ,EAAE,YAAY;AAAC,WAAQ;AACnC;AACA,kCAAkCa,aAAc,oBAAmBC,UAAW,kCAAiCC,QAAS;AACxH,sBAAsBC,mBAAoB,eAAcC,WAAY,WAAUC,SAAU;AACxF;AACA;AACA;AACA,OAP2B;AAOnB,GATgB;AAUpBC,EAAAA,cAAc,EAAE,IAVI;AAWpBb,EAAAA,QAAQ,EAAE,YAAW;AACjB;AACAC,IAAAA,OAAO,CAACC,cAAR,CAAuB,CAAvB;AACH;AAdmB,CAAxB,C,CAiBA",
      "sourceRoot": "/Users/clemchou/Documents/GitHub/ROAR3/src/",
      "sourcesContent": [
        "/* define welcome message trial */\nvar welcome = {\n    type: \"html-keyboard-response\",\n    stimulus: `<h1>Welcome to the world of Lexicality!!</h1>\n\\t<div class=\"row\">\n\\t\\t<div class=\"column_1\">\n\\t\\t\\t<img class=\"characterleft\" src=\"assets/wizard_magic.gif\" height=\"320px\" alt=\"animation of a wizard waving a magic wand\">\n\\t  \\t</div>\n\\t  <div class=\"column_3\">\n\\t\\t\\t<p class=\"middle\"> You are a young wizard searching for the gate that will return you to your home on Earth. To reach it, you must journey over lands ruled by magical guardians.</p>\n\\t\\t\\t<p class=\"middle\"> To call the guardian to let you through, you will tell the difference between made-up words and real words. &nbsp;</p>\n\\t\\t</div>\n\\t</div>\n\\t\n\\t<div class=\"button\">Press <span class=\"yellow\">Space</span> to continue\n\\t</div>`,\n    data: {\n        start_time: start_time.toLocaleString('PST'),\n        start_time_unix: start_time.getTime()\n    },\n    on_start: function() {\n        //set progress bar to 0 at the start of experiment\n        jsPsych.setProgressBar(0);\n    }\n};\n\n\n/* define instructions trial */\nvar instrux_1 = {\n    type: \"html-keyboard-response\",\n    stimulus: `\n    <h1>Welcome to the world of Lexicality!</h1>\n    <div class=\"row\">\n      <div class=\"column_1\">\n        <img class=\"characterleft\" src=\"assets/wizard_magic.gif\" height=\"320px\" alt=\"animation of a wizard waving a magic wand\">\n        </div>\n      <div class=\"column_3\">\n        <p class=\"middle\"> You are a young wizard searching for the gate that will return you to your home on Earth. To reach it, you must journey over lands ruled by magical guardians.</p>\n        <p class=\"middle\"> To call the guardian to let you through, you will tell the difference between made-up words and real words. &nbsp;</p>\n      </div>\n    </div>\n\n    <div class=\"button\">Press <span class=\"yellow\">Space</span> to continue\n    </div>\n      `,\n    //post_trial_gap: 2000,\n    on_start: function() {\n        //set progress bar to 0 at the start of experiment\n        jsPsych.setProgressBar(0);\n    }\n};\n\nvar instrux_2 = {\n    type: \"html-keyboard-response\",\n    stimulus: `\n    <h1>A real or made-up word will flash very quickly <br/> at the center of the screen.</h1>\n   <div class=\"row\">\n     <div class=\"column_2\">\n       <p>The made-up words might look like English words, but they do not mean anything in English. For example, laip, bove, or cigbert are made-up words. <span class=\"orange\"><b>If you see a made-up word, press the LEFT ARROW KEY.</b></span></p>\n     </div>\n     <div class=\"column_2\" style=\"background-color:#f2f2f2;\">\n       <p> The real words will be ones you recognize. They are real English words like is, and, basket, or lion. <span class=\"blue\"><b> If you see a real word, press the RIGHT ARROW KEY.</b></span></p>\n     </div>\n  </div>\n\n   <div class=\"row\">\n     <div class=\"column_2\">\n     <img width=\"100%\" src=\"assets/arrow_left_p2.png\" alt=\"Magic Word, Press the Left Arrow Key\" align=\"right\">\n     </div>\n     <div class=\"column_2\" style=\"background-color:#f2f2f2; height: 180px;\">\n     <img width=\"100%\" src=\"assets/arrow_right_p2.png\" alt=\"Real Word, Press the Right Arrow key\">\n     </div>\n   </div>\n\n   <div class=\"button\">Press <span class=\"yellow\">Space</span> to continue\n   </div>\n      `,\n    //post_trial_gap: 2000,\n    on_start: function() {\n        //set progress bar to 0 at the start of experiment\n        jsPsych.setProgressBar(0);\n    }\n};\n\nvar instrux_3 = {\n    type: \"html-keyboard-response\",\n    stimulus: `<h1>Great work, you are ready to begin the journey! </h1>\n\\t  <div>\n\\t\\t \\t <p class=\"center\"> As you travel through the valley, you’ll earn gold coins to bring home.</p>\n\\t\\t\\t  <img style=\"position: relative; top: 100px; \" width=\"400px\" src=\"assets/gold_coin.gif\" alt=\"gold\">\n\\t\\t\\t  <p class=\"center\" style=\"position: relative; top: 200px; \"><b>Look out for them!</b></p>\n\\t\\t </div>\n\\t\\t\n\\t<div class=\"button\">Press <span class=\"yellow\">Space</span> to begin\n\\t</div>\n\n      `,\n    //post_trial_gap: 2000,\n    on_start: function() {\n        //set progress bar to 0 at the start of experiment\n        jsPsych.setProgressBar(0);\n    }\n};\n\n/* define practice feedback trial*/\nvar practice_feedback = {\n    type: \"html-keyboard-response\",\n    stimulus: function () {return `\n       <body>\n\\t<h1 class=\"lower\"><span class=${responseColor}>You pressed the ${responseLR} arrow key, <br/> which is for ${answerRP} words! </span></h1>\n\\t<h3 class=\"lower\">${currentPracStimulus}<span class=${answerColor}>  is a ${correctRP}  word.</span></h3>\n\\t<img class=\"lower\" src=\"assets/key_p3.png\" alt=\"arrow keys\">\n\n</body>\n      `},\n    post_trial_gap: 2000,\n    on_start: function() {\n        //set progress bar to 0 at the start of experiment\n        jsPsych.setProgressBar(0);\n    }\n};\n\n//arrowkey_lex.png\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1636050930408
  }
}